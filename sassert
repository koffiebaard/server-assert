#!/bin/bash

appname="sassert"
appversion="0.1"

declare -A opt

while true; do
  case "$1" in
    -v | --version ) cmd="--version"; shift ;;
    -h | --help ) cmd="--help"; shift ;;
    -d | --debug ) opt["debug"]=true; shift ;;
    -q | --quiet | --shutup ) opt["quiet"]=true; shift ;;
    --exists ) cmd=$1; file=$2; shift 2 ;;
    --ownership ) cmd=$1; file=$2; owner=$3; shift 3 ;;
    --permissions ) cmd=$1; file=$2; permissions=$3; shift 3 ;;
    --symlink ) cmd=$1; file=$2; symlinkDestination=$3; shift 3 ;;
    --daemon-running ) cmd=$1; daemon=$2; shift 2 ;;
    --process-match ) cmd=$1; processRegex=$2; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done 

# let's default to the syntax view
if [ ! $cmd ]; then
	cmd="--help"
fi

source ./filesystem
#source ./procs
#source ./network


if [ $cmd ]; then
	case $cmd in
		"--version" )
			if [ ! ${opt["quiet"]} ]; then
				echo "thought you'd never ask."
				echo "$appname $appversion"
			else
				echo $appversion;
			fi ;;
		"--help" )
			if [ ! ${opt["quiet"]} ]; then
				echo "$appname $appversion"
				echo ""
				echo "Usage:"
				echo "	--exists [dir/file]			Verify if dir or file exists"
				echo "	--permissions [dir/file] [perms]	Verify permissions (in numeric format)"
				echo "	--ownership [dir/file] [username]	Verify ownership"
				echo "	--symlink [file] [destination]		Verify the destination of the symlink"
				echo "	-v, --version				Show version"
				echo ""
				echo "Flags:"
				echo "	-q, --quiet				Quiet"
				echo ""
			else
				echo "no help for you, buddy.";
			fi ;;
		"--exists" )
			exists $file ;;
		"--ownership" )
			if [ -e $file ]; then
				if [ -f $file ]; then
					actualOwner=$(ls -la $file | awk '{print $3}')
				else
					actualOwner=$(ls -la $file | grep " \.$" | awk '{print $3}')
				fi

				if [ $owner == $actualOwner ]; then
					echo -e "\e[90mownership $file by $owner.... \e[92mOK!"
				else
					echo -e "\e[90mownership $file by $owner.... \e[91mhell naw. it's $actualOwner, not $owner"	
				fi
			else
				echo -e "\e[90mownership $file .... \e[91mhell naw. Doesn't exist."
			fi ;;
		"--permissions" )
			if [ -e $file ]; then
				if [ -f $file  ] || [ -h $file ]; then
					actualPermissions=$(ls -la $file | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));if(k)printf("%0o ",k);print}' | awk '{print $1}')
				else
					actualPermissions=$(ls -la $file | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));if(k)printf("%0o ",k);print}' | grep " \.$" | awk '{print $1}')
				fi

				if [ "$permissions" == "$actualPermissions" ]; then
					echo -e "\e[90mpermissions $file being $permissions.... \e[92mOK!"
				else
					echo -e "\e[90mpermissions $file being $permissions.... \e[91mhell naw. it's $actualPermissions, not $permissions"	
				fi
			else
				echo -e "\e[90mpermissions $file .... \e[91mhell naw. Doesn't exist."
			fi ;;
		"--symlink" )
			if [ -e $file ]; then
				if [ -h $file ]; then
					actualSymlinkDestination=$(ls -l ~/testsymlink | awk '{print $11}')
					if [ $symlinkDestination == $actualSymlinkDestination ]; then
						echo -e "\e[90msymlink $file going to $symlinkDestination.... \e[92mOK!"
					else
						echo -e "\e[90msymlink $file going to $symlinkDestination.... \e[91mhell naw. it's $actualSymlinkDestination, not $symlinkDestination"	
					fi
				else
					echo -e "\e[90msymlink $file .... \e[91mhell naw. Not a symlink."
				fi
			else
				echo -e "\e[90msymlink $file .... \e[91mhell naw. Doesn't exist."
			fi ;;
		"--daemon-running" )
			if [ $(ps -e | egrep \ $daemon$ | wc -l) -gt 0 ]; then
				 echo -e "\e[90mdaemon-running $daemon .... \e[92mOK!"
			else
				echo -e "\e[90mdaemon-running $file .... \e[91mhell naw. Not running"
			fi ;;
		"--process-match" )
			if [ $(ps aux | egrep $processRegex | wc -l) -gt 0 ]; then
				 echo -e "\e[90mprocess-match $processRegex .... \e[92mOK!"
			else
				echo -e "\e[90mprocess-match $processRegex .... \e[91mhell naw. Not running"
			fi ;;
    		-- ) shift; break ;;
		* ) break ;; 
	esac
else
	echo "That's not how it works, dude."
fi
